Buffer : Type {
    @Bytes: ?-byte
    Position: int ? 0
    meta : Meta {
        Import: "encoding/binary"
        Write: "() []byte {
            var buffer Buffer
            buffer.Put(this.Bytes)
            buffer.Put(buffer.IntBytes(this.Position))
            return buffer.Bytes
        }"
        FetchBuffer: "() {}"
        ReadBuffer: "() {}"
        Put: "(bytes []byte) {
            this.Bytes = append(this.Bytes, bytes...)
        }"
        Fetch: "(c int) []byte {
            prev := this.Position
            this.Position += c
            return this.Bytes[prev : this.Position]
        }"
        conv : Group {
            Fetchbyte: "() byte {
                return this.Fetch(1)[0]
            }"
            ByteBytes: "(b []byte) []byte {
                return b
            }"
            Fetchstring: "() string {
                size := this.Fetchint()
                return string(this.Fetch(size))
            }"
            StringBytes: "(s string) []byte {
                var bytes []byte
                b := []byte(s)
                bytes = append(bytes, this.IntBytes(len(b))...)
                bytes = append(bytes, b...)
                return bytes
            }"
            Fetchint: "() int {
                return int(binary.LittleEndian.Uint32(this.Fetch(4)))
            }"
            IntBytes: "(i int) []byte {
                bs := make([]byte, 4)
                binary.LittleEndian.PutUint32(bs, uint32(i))
                return bs
            }"
            Fetchint8: "() int8 {
                return int8(this.Fetch(1)[0])
            }"
            Int8Bytes: "(i int8) []byte {
                return []byte{byte(i)}
            }"
            Fetchint16: "() int16 {
                return int16(binary.LittleEndian.Uint16(this.Fetch(2)))
            }"
            Int16Bytes: "(i int16) []byte {
                bs := make([]byte, 2)
                binary.LittleEndian.PutUint16(bs, uint16(i))
                return bs
            }"
            Fetchint64: "() int64 {
                return int64(binary.LittleEndian.Uint64(this.Fetch(8)))
            }"
            Int64Bytes: "(i int64) []byte {
                bs := make([]byte, 8)
                binary.LittleEndian.PutUint64(bs, uint64(i))
                return bs
            }"
            Fetchuint: "() uint {
                return uint(binary.LittleEndian.Uint32(this.Fetch(4)))
            }"
            UintBytes: "(i uint) []byte {
                bs := make([]byte, 4)
                binary.LittleEndian.PutUint32(bs, uint32(i))
                return bs
            }"
            Fetchuint8: "() uint8 {
                return uint8(this.Fetch(1)[0])
            }"
            Uint8Bytes: "(i uint8) []byte {
                return []byte{byte(i)}
            }"
            Fetchuint16: "() uint16 {
                return binary.LittleEndian.Uint16(this.Fetch(2))
            }"
            Uint16Bytes: "(i uint16) []byte {
                bs := make([]byte, 2)
                binary.LittleEndian.PutUint16(bs, i)
                return bs
            }"
            Fetchuint64: "() uint64 {
                return binary.LittleEndian.Uint64(this.Fetch(8))
            }"
            Uint64Bytes: "(i uint64) []byte {
                bs := make([]byte, 8)
                binary.LittleEndian.PutUint64(bs, i)
                return bs
            }"
        }
    }
}